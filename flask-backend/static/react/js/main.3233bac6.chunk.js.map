{"version":3,"sources":["container/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Typography","TextArea","Input","Container","useState","query","setQuery","plan","setPlan","graph","setGraph","graphVisible","setGraphVisible","className","level","value","height","onChange","extensions","sql","dialect","PostgreSQL","placeholder","style","display","justifyContent","marginTop","type","onClick","length","message","error","fetch","method","cache","headers","body","JSON","stringify","then","response","json","data","plan_raw","instructions","temp","console","log","i","graphPlan","elements","edges","root","Plan","id","xOffset","Math","floor","window","innerWidth","dfs","x","y","parent","node_id","push","label","position","undefined","source","target","Plans","buildGraphElements","error_message","marginLeft","App","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.3233bac6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { PostgreSQL, sql } from '@codemirror/lang-sql';\nimport { Typography, Button, Input, message } from 'antd';\nimport ReactFlow from 'react-flow-renderer';\nimport './index.css'\n\nconst {Title} = Typography\nconst {TextArea} = Input\nconst Container:React.FC = () => {\n    const [query, setQuery] = useState('')\n    const [plan, setPlan] = useState('')\n    const [graph, setGraph] = useState<any[]>([])\n    const [graphVisible, setGraphVisible] = useState(false)\n\n    const buildGraphElements = (graphPlan: any) => {\n        let elements: any[] = []\n        const edges: { id: string; type: string; source: string; target: string; }[] = []\n        let root = graphPlan.Plan\n        let id = 0 \n        const xOffset = Math.floor(window.innerWidth / 2) - 115 \n        function dfs(root:any, x: number, y: number, parent?:number):void{\n            let node_id = id\n            id++\n            const type = 'default'\n            elements.push({\n                id: `${node_id}`,\n                data: {label: root['Node Type']},\n                position: {x: x + xOffset, y},\n                type\n            })\n            if(parent !== undefined){\n                edges.push({\n                    id: `${parent}-${node_id}`,\n                    type: 'straight',\n                    source: `${parent}`,\n                    target: `${node_id}`,\n                })\n            }\n\n            if(root.Plans !== undefined){\n                if (root.Plans.length === 1){\n                    dfs(root.Plans[0], x, y + 100, node_id)\n                } else if (root.Plans.length === 2){\n                    dfs(root.Plans[0], x - 125, y + 100, node_id)\n                    dfs(root.Plans[1], x + 125, y + 100, node_id)\n                }\n            }\n        }\n        console.log(graphPlan)\n        dfs(root, 0, 10)\n        console.log('created graph', [...elements, ...edges])\n        setGraph([...elements, ...edges])\n    }\n    const onclick = () => {\n        if(query.length < 1){\n            message.error('SQL Query must not be empty')\n            return\n        }\n        \n        fetch(\"/api/get_query\",{\n            method: 'POST',\n            cache:'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({query}) \n        })\n        .then(response => response.json())\n        .then(data => {\n            setPlan('')\n            setGraphVisible(false)\n            setGraph([])\n            if(data.error !== 0){\n                message.error(data.error_message)\n                return\n            }\n            const plan_raw = data.instructions\n            let temp = \"\"\n            console.log(data.instructions)\n            for(let i = 0; i < plan_raw.length; i++){\n                temp += `Step ${i+1}: ${plan_raw[i]} \\n`\n            }\n            setPlan(temp)\n            buildGraphElements(data.plan)\n        });\n    }\n    const onclear = () => {\n        setQuery('')\n        setPlan('')\n        setGraph([])\n        setGraphVisible(false)\n    }\n    return (\n        <>\n        <div className=\"main-container\">\n            <div className=\"sql-container\">\n                <Title level={3}>SQL Query</Title>\n                <CodeMirror\n                    value={query}\n                    height={'300px'}\n                    onChange={value => setQuery(value)}\n                    extensions={[sql({dialect: PostgreSQL})]}\n                    placeholder={'Input SQL Query here'}\n                    />\n                <div style={{display: 'flex', justifyContent:'flex-end', marginTop: 20}}>\n                    <Button type=\"primary\" onClick={onclick}>Annotate Query</Button>\n                    <Button style={{marginLeft: 10}} onClick={onclear}>Clear</Button>\n                </div>\n                \n            </div>\n            <div className=\"plan-container\">\n                <Title level={3}>Execution Plan</Title>\n                <TextArea value={plan} style={{height: 300}}/>\n                {graph.length !== 0 && <Button type=\"primary\" style={{marginTop: 20}} onClick={() => {setGraphVisible(true)}}>Visualise</Button>}\n            </div>\n\n        </div>\n        {graphVisible && (<div>\n            <ReactFlow elements={graph} style={{height: 400, marginTop: 20}} />\n        </div>)}\n      </>\n    )\n}\nexport default Container","import React from 'react';\nimport { Typography} from 'antd';\nimport Container from './container'\nimport './App.css';\n\n// const test_input = 'select * from customer C, orders O where C.c_custkey = O.o_custkey;'\nconst { Title } = Typography;\nconst App = () => {\n\n    return (\n        <div className=\"App\" style={{padding: '20px 40px'}}>\n            <Title>Query Execution Plan Annotator - Group 41</Title>\n            <Container/>\n        </div>\n)};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}