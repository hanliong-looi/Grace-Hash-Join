{"version":3,"sources":["favicon.png","container/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Typography","TextArea","Input","Container","useState","query","setQuery","plan","setPlan","graph","setGraph","graphVisible","setGraphVisible","className","level","value","height","onChange","extensions","sql","dialect","PostgreSQL","placeholder","style","display","justifyContent","marginTop","size","type","onClick","length","message","error","fetch","method","cache","headers","body","JSON","stringify","then","response","json","data","error_message","warn","plan_raw","instructions","temp","console","log","i","graphPlan","elements","edges","root","Plan","id","xOffset","Math","floor","window","innerWidth","dfs","x","y","parent","node_id","push","label","position","draggable","undefined","source","target","Plans","buildGraphElements","marginLeft","CopyOutlined","cursor","fontSize","navigator","clipboard","writeText","info","flexDirection","alignItems","content","InfoCircleOutlined","Paragraph","Header","Layout","Panel","Collapse","App","isModalVisible","setIsModalVisible","backgroundColor","boxShadow","src","logo","alt","width","marginBottom","padding","cancelButtonProps","visibility","title","visible","onOk","onCancel","header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.c86c9570.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/favicon.4587ce60.png\";","import React, {useState} from 'react';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { PostgreSQL, sql } from '@codemirror/lang-sql';\nimport { Typography, Button, Input, message, Popover } from 'antd';\nimport { CopyOutlined, InfoCircleOutlined } from \"@ant-design/icons\"\nimport ReactFlow from 'react-flow-renderer';\nimport './index.css'\n\nconst {Title} = Typography\nconst {TextArea} = Input\nconst Container:React.FC = () => {\n    const [query, setQuery] = useState('')\n    const [plan, setPlan] = useState('')\n    const [graph, setGraph] = useState<any[]>([])\n    const [graphVisible, setGraphVisible] = useState(false)\n\n    const buildGraphElements = (graphPlan: any) => {\n        let elements: any[] = []\n        const edges: { id: string; type: string; source: string; target: string; }[] = []\n        let root = graphPlan.Plan\n        let id = 0 \n        const xOffset = Math.floor(window.innerWidth / 2) - 115 \n        function dfs(root:any, x: number, y: number, parent?:number):void{\n            let node_id = id\n            id++\n            const type = 'default'\n            elements.push({\n                id: `${node_id}`,\n                data: {label: root['Node Type']},\n                position: {x: x + xOffset, y},\n                draggable: false,\n                type\n            })\n            if(parent !== undefined){\n                edges.push({\n                    id: `${parent}-${node_id}`,\n                    type: 'straight',\n                    source: `${parent}`,\n                    target: `${node_id}`,\n                })\n            }\n\n            if(root.Plans !== undefined){\n                if (root.Plans.length === 1){\n                    dfs(root.Plans[0], x, y + 100, node_id)\n                } else if (root.Plans.length === 2){\n                    dfs(root.Plans[0], x - 125, y + 75, node_id)\n                    dfs(root.Plans[1], x + 125, y + 75, node_id)\n                }\n            }\n        }\n        console.log(JSON.stringify(graphPlan))\n        dfs(root, 0, 10)\n        setGraph([...elements, ...edges])\n    }\n    const onclick = () => {\n        if(query.length < 1){\n            message.error('SQL Query must not be empty')\n            return\n        }\n        \n        fetch(\"/api/get_query\",{\n            method: 'POST',\n            cache:'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({query}) \n        })\n        .then(response => response.json())\n        .then(data => {\n            setPlan('')\n            setGraphVisible(false)\n            setGraph([])\n            if(data.error !== 0){\n                message.error(data.error_message)\n                return\n            } else if (data.error_message){\n                message.warn(data.error_message)\n            }\n            const plan_raw = data.instructions\n            let temp = \"\"\n            console.log(data.instructions)\n            for(let i = 0; i < plan_raw.length; i++){\n                temp += `Step ${i+1}: ${plan_raw[i]} \\n`\n            }\n            setPlan(temp)\n            buildGraphElements(data.plan)\n        });\n    }\n    const onclear = () => {\n        setQuery('')\n        setPlan('')\n        setGraph([])\n        setGraphVisible(false)\n    }\n    return (\n        <>\n        <div className=\"main-container\">\n            <div className=\"sql-container\">\n                <Title level={3}>Query Panel</Title>\n                <CodeMirror\n                    value={query}\n                    height={'280px'}\n                    onChange={value => setQuery(value)}\n                    extensions={[sql({dialect: PostgreSQL})]}\n                    placeholder={'Input SQL Query here'}\n                    />\n                <div style={{display: 'flex', justifyContent:'flex-end', marginTop: 20}}>\n                    <Button size=\"large\" type=\"primary\" onClick={onclick}>Annotate</Button>\n                    <Button size=\"large\" style={{marginLeft: 10}} onClick={onclear}>Clear</Button>\n                </div>\n                \n            </div>\n            <div className=\"plan-container\">\n                <div className=\"exe-plan\">\n                    <Title level={3}>\n                        Execution Plan\n                        {plan !== '' && <CopyOutlined style={{marginLeft: 7,marginTop:-2, cursor:'pointer', fontSize: 17}} onClick={() => {\n                            if(plan){\n                                navigator.clipboard.writeText(plan).then(() => {\n                                    message.info('Successfully Copied Text')\n                                })\n                            }\n                        }}/>}\n                    </Title>\n                </div>\n                <TextArea value={plan} style={{height: 280}}/>\n                {graph.length !== 0 && <Button size=\"large\" type=\"primary\" style={{marginTop: 20}} onClick={() => {setGraphVisible(true)}}>Visualise</Button>}\n            </div>\n\n        </div>\n        <div style={{display: 'flex', flexDirection:'column', alignItems:'center', marginTop: 20}}>\n            <div style={{display: 'flex', alignItems:'center'}}>\n            <Title level={3}>Visualisation Panel</Title>\n            <Popover content=\"You can interact with the graph using pinch to zoom and dragging left and right.\">\n                <InfoCircleOutlined style={{marginLeft: 4, fontSize: 17, marginTop: -10}}  />\n            </Popover>\n            </div>\n            {graphVisible && <ReactFlow elements={graph} style={{height: 400}} />}\n        </div>\n      </>\n    )\n}\nexport default Container","import React, {useState} from 'react';\nimport {Button, Layout, Typography, Modal, Collapse} from 'antd';\nimport logo from './favicon.png'\nimport Container from './container'\nimport './App.css';\n\n// const test_input = 'select * from customer C, orders O where C.c_custkey = O.o_custkey;'\nconst { Title, Paragraph } = Typography;\nconst { Header } = Layout;\nconst { Panel } = Collapse;\n\nconst App = () => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleOk = () => {\n        setIsModalVisible(false);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n    return (\n        <div className=\"App\">\n            <Header style={{display: 'flex', alignItems:'center', backgroundColor:'#fff', boxShadow: \"0 2px 8px #f0f1f2\"}}>\n                <img src={logo} alt=\"doge\" style={{width: 32, height:32}} />\n                <Title style={{marginBottom: 0, marginLeft: 6}} level={2}>QEP Annotator - Group 41</Title>\n                <Button style={{marginLeft: 21, marginTop: 3}} onClick={showModal} size=\"middle\">Database Schema</Button> \n            </Header>\n            <div style={{padding: '20px 40px'}}>\n                <Container/>\n            </div>\n            <Modal cancelButtonProps={{style: {visibility:'hidden'}}} title=\"TPC-H Database Schema\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n            <Collapse>\n                <Panel header=\"customer\" key=\"1\">\n                    <Paragraph>c_custkey (integer)</Paragraph>\n                    <Paragraph>c_name (character varying)</Paragraph>\n                    <Paragraph>c_address (character varying)</Paragraph>\n                    <Paragraph>c_nationkey (integer)</Paragraph>\n                    <Paragraph>c_phone (character)</Paragraph>\n                    <Paragraph>c_acctbal (numeric)</Paragraph>\n                    <Paragraph>c_mktsegment (character)</Paragraph>\n                    <Paragraph>c_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"lineitem\" key=\"2\">\n                    <Paragraph>l_orderkey (integer)</Paragraph>\n                    <Paragraph>l_partkey (integer)</Paragraph>\n                    <Paragraph>l_suppkey (integer)</Paragraph>\n                    <Paragraph>l_linenumber (integer)</Paragraph>\n                    <Paragraph>l_quantity (numric)</Paragraph>\n                    <Paragraph>l_extendedprice (numeric)</Paragraph>\n                    <Paragraph>l_discount (numeric)</Paragraph>\n                    <Paragraph>l_tax (numeric)</Paragraph>\n                    <Paragraph>l_returnflag (character)</Paragraph>\n                    <Paragraph>l_linestatus (character)</Paragraph>\n                    <Paragraph>l_shipdate (date)</Paragraph>\n                    <Paragraph>l_commitdate (date)</Paragraph>\n                    <Paragraph>l_receiptdate (date)</Paragraph>\n                    <Paragraph>l_shipinstruct (character)</Paragraph>\n                    <Paragraph>l_shipmode (character)</Paragraph>\n                    <Paragraph>l_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"nation\" key=\"3\">\n                    <Paragraph>n_nationkey (integer)</Paragraph>\n                    <Paragraph>n_name (character)</Paragraph>\n                    <Paragraph>n_regionkey (integer)</Paragraph>\n                    <Paragraph>n_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"orders\" key=\"4\">\n                    <Paragraph>o_orderkey (integer)</Paragraph>\n                    <Paragraph>o_custkey (integer)</Paragraph>\n                    <Paragraph>o_orderstatus (character)</Paragraph>\n                    <Paragraph>o_totalprice (numeric)</Paragraph>\n                    <Paragraph>o_orderdate (date)</Paragraph>\n                    <Paragraph>o_orderpriority (character)</Paragraph>\n                    <Paragraph>o_clerk (character)</Paragraph>\n                    <Paragraph>o_shippriority (integer)</Paragraph>\n                    <Paragraph>o_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"part\" key=\"5\">\n                    <Paragraph>p_partkey (integer)</Paragraph>\n                    <Paragraph>p_name (character varying)</Paragraph>\n                    <Paragraph>p_mfgr (character)</Paragraph>\n                    <Paragraph>p_brand (character)</Paragraph>\n                    <Paragraph>p_type (character varying)</Paragraph>\n                    <Paragraph>p_size (integer)</Paragraph>\n                    <Paragraph>p_container (character)</Paragraph>\n                    <Paragraph>p_retailprice (numeric)</Paragraph>\n                    <Paragraph>p_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"partsupp\" key=\"6\">\n                    <Paragraph>ps_partkey (integer)</Paragraph>\n                    <Paragraph>ps_suppkey (integer)</Paragraph>\n                    <Paragraph>ps_availqty (integer)</Paragraph>\n                    <Paragraph>ps_supplycost (numeric)</Paragraph>\n                    <Paragraph>ps_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"region\" key=\"7\">\n                    <Paragraph>r_regionkey (integer)</Paragraph>\n                    <Paragraph>r_name (character)</Paragraph>\n                    <Paragraph>r_comment (character varying)</Paragraph>\n                </Panel>\n                <Panel header=\"supplier\" key=\"8\">\n                    <Paragraph>s_suppkey (integer)</Paragraph>\n                    <Paragraph>s_name (character)</Paragraph>\n                    <Paragraph>s_address (character varying)</Paragraph>\n                    <Paragraph>s_nationkey (integer)</Paragraph>\n                    <Paragraph>s_phone (character)</Paragraph>\n                    <Paragraph>s_acctbal (numeric)</Paragraph>\n                    <Paragraph>s_mktsegment (character)</Paragraph>\n                    <Paragraph>s_comment (character varying)</Paragraph>\n                </Panel>\n            </Collapse>\n            </Modal>\n        </div>\n\n)};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}